name: Weekly merge staging â†’ main
on:
  # 1:00 pm Central *with* DST handling:
  # Marâ€“Oct (CDT): 18:00 UTC is 1:00 pm CDT
  schedule:
      - cron: "0 18 * 3,4,5,6,7,8,9,10 2"
  # Novâ€“Feb (CST): 19:00 UTC is 1:00 pm CST
      - cron: "0 19 * 11,12,1,2 2"
  # Manual trigger if you ever want to run it now
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  weekly-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Ensure GH CLI available
        run: gh --version
        
      - name: Check for recent commits only
        run: |
          set -euo pipefail
          
          # Set your relative cutoff (last 7 days)
          CUTOFF_PERIOD="7 days ago"
          
          # Fetch all remote branches (safer approach)
          git fetch origin
          
          # Check if staging has commits after the cutoff period that aren't in main
          RECENT_COMMITS=$(git log origin/main..origin/staging --since="$CUTOFF_PERIOD" --oneline)
          
          if [ -z "$RECENT_COMMITS" ]; then
            echo "HAS_RECENT_CHANGES=false" >> $GITHUB_ENV
            echo "No commits in staging from the last 7 days that aren't in main"
          else
            echo "HAS_RECENT_CHANGES=true" >> $GITHUB_ENV
            echo "Found recent commits in staging:"
            echo "$RECENT_COMMITS"
            # Save commit count for PR description
            COMMIT_COUNT=$(echo "$RECENT_COMMITS" | wc -l)
            echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
          fi
          
      - name: Open PR from staging â†’ main if missing
        if: env.HAS_RECENT_CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          # If a PR already exists from staging to main, do nothing
          if gh pr list --base main --head staging --state open --json number --jq '.[0].number' | grep -q '^[0-9]'; then
            echo "PR already open."
          else
            gh pr create \
              --base main \
              --head staging \
              --title "Weekly merge: staging â†’ main (${{ env.COMMIT_COUNT }} commits from last 7 days)" \
              --body "Automated weekly PR from staging to main.

ðŸ“… **Time Period**: Last 7 days
ðŸ“Š **Commits**: ${{ env.COMMIT_COUNT }} new commits
ðŸ”„ **Merge Strategy**: Squash merge

This PR includes only commits from the last 7 days that are in staging but not yet in main."
          fi
          
      - name: Try to enable auto-merge (squash)
        if: env.HAS_RECENT_CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          pr=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number' || true)
          if [ -n "$pr" ]; then
            # If branch protections / checks allow, this turns on auto-merge.
            gh pr merge "$pr" --squash --auto || echo "Automerge not enabled yet (checks or protections pending)."
            echo "âœ… Auto-merge enabled for PR #$pr"
          fi
          
      - name: Summary
        if: always()
        run: |
          if [ "${{ env.HAS_RECENT_CHANGES }}" == "true" ]; then
            echo "Workflow completed: PR created/updated for ${{ env.COMMIT_COUNT }} recent commits"
          else
            echo "Workflow completed: No recent commits found, no PR needed"
          fi
